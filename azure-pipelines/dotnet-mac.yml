steps:

# Note: 2019-12 Even though 'dotnet build' can build this, it's not compatible with MicroBuild Signing. Must use MSBuild.
- task: MSBuild@1
  displayName: 'Restore src Mac projects'
  inputs:
    msbuildArguments: /t:restore
    solution: CI/CI.Mac.proj
    configuration: '$(BuildConfiguration)'

- task: MSBuild@1
  displayName: 'Build src Mac projects'
  inputs:
    msbuildArguments: /t:build /p:NoRestore=true
    solution: CI/CI.Mac.proj
    configuration: '$(BuildConfiguration)'

- task: MSBuild@1
  displayName: 'Pack src Mac projects'
  inputs:
    msbuildArguments: /t:pack /p:NoBuild=true
    solution: CI/CI.Mac.proj
    configuration: '$(BuildConfiguration)'

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines/variables/_pipelines.ps1
    failOnStderr: true
  displayName: Update pipeline variables based on build outputs
  condition: succeededOrFailed()

# - task: CopyFiles@2
#   displayName: 'Copy packages to staging directory'
#   inputs:
#     contents: '$(System.DefaultWorkingDirectory)/**/*.nupkg'
#     targetFolder: $(Build.ArtifactStagingDirectory)/SignedPackages
#     flattenFolders: true

# - task: PublishPipelineArtifact@1
#   inputs:
#     targetPath: $(Build.ArtifactStagingDirectory)/SignedPackages
#     artifactName: 'SignedPackages'

# - task: PublishSymbols@2
#   inputs:
#     SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols-Windows
#     SearchPattern: '**/*.pdb'
#     IndexSources: false
#     SymbolServerType: TeamServices
#   displayName: Publish symbols to symbol server
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Agent.OS'], 'Windows_NT'))
